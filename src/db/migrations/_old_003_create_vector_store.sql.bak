-- Enable pgvector extension for vector similarity search
CREATE EXTENSION IF NOT EXISTS vector;

-- Resume Chunks Table for Vector Embeddings
-- This table stores text chunks from resumes with their vector embeddings
-- Used for AI-powered semantic search and interview question generation
CREATE TABLE IF NOT EXISTS resume_chunks (
    id SERIAL PRIMARY KEY,
    resume_id INTEGER NOT NULL REFERENCES resumes(id) ON DELETE CASCADE,
    chunk_index INTEGER NOT NULL,          -- Order of chunk within the resume (0, 1, 2, ...)
    text TEXT NOT NULL,                    -- The actual text chunk from the resume
    metadata JSONB,                         -- Stores user_id and other metadata
    embedding vector(768),                  -- Vector embedding (768 dimensions for text-embedding-004)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(resume_id, chunk_index)         -- Ensure unique chunk ordering per resume
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_resume_chunks_resume_id ON resume_chunks(resume_id);

-- Index for vector similarity search (using HNSW algorithm)
-- This significantly speeds up similarity searches
CREATE INDEX IF NOT EXISTS idx_resume_chunks_embedding ON resume_chunks 
USING hnsw (embedding vector_cosine_ops);

-- Index on metadata for additional filtering
CREATE INDEX IF NOT EXISTS idx_resume_chunks_metadata ON resume_chunks USING gin(metadata);

-- Index for filtering by user_id in metadata (for backward compatibility)
CREATE INDEX IF NOT EXISTS idx_resume_chunks_user_id ON resume_chunks 
((metadata->>'user_id'));

-- Add comments to explain the table and columns
COMMENT ON TABLE resume_chunks IS 'Stores resume text chunks with vector embeddings for AI-powered semantic search. Each chunk is linked to a resume via resume_id.';
COMMENT ON COLUMN resume_chunks.resume_id IS 'Foreign key to resumes table - enables CASCADE delete when resume is deleted';
COMMENT ON COLUMN resume_chunks.chunk_index IS 'Sequential index of chunk within the resume (0-based). Useful for reconstructing original document order.';
COMMENT ON COLUMN resume_chunks.text IS 'Text chunk extracted from resume (typically 500 chars with 100 char overlap)';
COMMENT ON COLUMN resume_chunks.metadata IS 'JSONB containing user_id and other metadata for flexible querying';
COMMENT ON COLUMN resume_chunks.embedding IS 'Vector embedding generated by Google text-embedding-004 model (768 dimensions)';

